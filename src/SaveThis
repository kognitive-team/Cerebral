<div>
    <LeftNav />

      <div className="cerebral-dummy-class pusher">
        <div className="ui grid stackable padded" >
          <div className="four wide computer eight wide tablet sixteen wide mobile column">
            <TopNav />
          </div>
        </div>
        <div className="main-content">
          <div className="ui grid stackable padded">
            <div className="three wide computer six wide tablet sixteen wide mobile column">
              <EngagePanel />
            </div>
            <div className="eight wide computer eight wide tablet sixteen wide mobile column">
              <ContactPanel />
            </div>
            <div className="four wide computer eight wide tablet sixteen wide mobile column">
              <NextStepAction />
            </div>
          </div>
        </div>
      </div>
    </div>

 const panes = [
            {
                menuItem: { key: 'phone', icon: 'phone', content: 'Phone' },
                render: () => <Tab.Pane floated="left" style={{ borderBottom: 'none' }}><PhoneEngage /></Tab.Pane>,
            },
            {
                menuItem: { key: 'chat', icon: 'chat', content: 'Chat' },
                render: () => <Tab.Pane>Tab 2 Content</Tab.Pane>,
            },
        ]



        agentGoAvailable() {
    // Streams API call to the first Routable state availale to the Agent
    // Logging results to the console and setting the DOM button UI to the 'Available' state
    var routableState = AWSConnect.agent.getAgentStates().filter(function (state) {
        return state.type === AWSConnect.AgentStateType.ROUTABLE;
    })[0];
    AWSConnect.agent.setState(routableState, {
        success: function () {
            console.log('here in success of setState')
            console.log('Set agent status to Available via Streams');
            this.props.handleAgentStateChangeAction('Available')
        },
        failure: function () {
            console.log('Failed to set agent status to Available via Streams');
        }
    });
}
 agentGoOffline() {
      var offlineState = AWSConnect.agent.getAgentStates().filter(function (state) {
        return state.type === AWSConnect.AgentStateType.OFFLINE;
    })[0];
    AWSConnect.agent.setState(offlineState, {
        success: function () {
            console.log('Succesfully set agent status to Offline via Streams');
            this.props.handleAgentStateChangeAction('Offline')

        },
        failure: function () {
            console.log('Failed to set agent status to Offline via Streams');
        }
    });
}



 this.initializeCCP = this.initializeCCP.bind(this);
    
        this.subscribeToAgentEvents = this.subscribeToAgentEvents.bind(this);
        this.setAgentDataOnState = this.setAgentDataOnState.bind(this)
        this.handleAgentRefresh = this.handleAgentRefresh.bind(this);
     //   this.handleAgentRoutable = this.handleAgentRoutable.bind(this);
     //   this.handleAgentNotRoutable = this.handleAgentNotRoutable.bind(this);
        this.handleAgentStateChange = this.handleAgentStateChange.bind(this);

    }

    componentDidMount() {
        this.initializeCCP()
    }

    //Create the CCP Connection with AWS Provided CCP Panel
    initializeCCP() {
            AWSConnect.core.initCCP(this.containerDiv.current, {
                ccpUrl: CONNECT_INSTANCE_URL,            // REQUIRED
                loginPopup: true,               // optional, defaults to `true`
                loginPopupAutoClose: true,      // optional, defaults to `true`
                loginOptions: {                 // optional, if provided opens login in new window
                    autoClose: true,              // optional, defaults to `false`
                    height: 600,                  // optional, defaults to 578
                    width: 400,                   // optional, defaults to 433
                    top: 0,                       // optional, defaults to 0
                    left: 0                       // optional, defaults to 0
                },
                region: AWS_REGION,         // REQUIRED for `CHAT`, optional otherwise
                softphone: {                    // optional
                    allowFramedSoftphone: true// optional
                }
            });
            AWSConnect.agent(this.subscribeToAgentEvents) //Subscribe to the agent events
    }


    subscribeToAgentEvents(agent) {
        window.myCPP.agent = agent;
        agent.onRefresh(this.handleAgentRefresh);
        agent.onRoutable(this.handleAgentRoutable);
        agent.onNotRoutable(this.handleAgentNotRoutable);
        agent.onOffline(this.handleAgentOffline);
        agent.onStateChange(this.handleAgentStateChange);
        //get the list of the queue names to match with the name of the queues that the agent is listed on
        agent.onError((agent) => {
            console.log('Error with Agent')
        })
        

        this.setAgentDataOnState(agent)
    }


    setAgentDataOnState(agent) {
      if (this && agent) {
            this.props.addCurrentAgent(this.collectAgentData(agent))
        }
    }

    collectAgentData(agent){
        const agentQueueARNList = agent.getAllQueueARNs()
        const queueList = []
        if (!_.isEmpty(agentQueueARNList) && agentQueueARNList.length > 0){
            for (var i=0;i<agentQueueARNList.length;i++){
                queueList.push(agentQueueARNList[i].split('/').pop());
            }
        }
        var agentData = {}
        agentData.name = agent.getName()
        agentData.status = agent.getState().name
        agentData.statusDuration = agent.getStatusDuration()
        agentData.queueList = queueList
        return agentData;
    }
    refreshAgentDataOnState(agent){
        this.props.handleAgentStateChangeAction(this.collectAgentData(agent))
    }

    handleAgentStateChange(agent) {
        this.refreshAgentDataOnState(agent)
    }

    handleAgentRefresh(agent) {
        this.refreshAgentDataOnState(agent)
    }


https://connect.us-east-1.amazonaws.com/queues-summary/28466db6-06f0-4ab2-a6d1-2377336d9c9c?maxResults=10&queueTypes=AGENT
https://connect.us-east-1.amazonaws.com/queues-summary/28466db6-06f0-4ab2-a6d1-2377336d9c9c?maxResults=20&queueTypes=AGENT
https://connect.us-east-1.amazonaws.com/queues-summary/28466db6-06f0-4ab2-a6d1-2377336d9c9c?maxResults=20&queueTypes=AGENT


//Agent status

 <Grid item xs={12} lg={2} md={3} className={classes.gridSpacing} spacing={1}>

                 <Card className={classes.root}>
                    <CardContent>
                        <Typography align="center" className={classes.cardMetrics} variant="h2" component="h2">
                            {this.state.agentsOnline}
                        </Typography>
                        <Box component="span" m={1} /> 
                        <Typography align='center' variant="h6" component="h6" > Agent(s) Online</Typography>
                    </CardContent>
                </Card>
                </Grid>
                <Grid item xs={12} lg={2} md={3} className={classes.gridSpacing} spacing={2}>
                    <Card className={classes.root}>
                        <CardContent>
                            <Typography align="center" className={classes.cardMetrics} variant="h2" component="h2">
                                {this.state.agentsAvailable}
                            </Typography>
                            <Box component="span" m={1} /> 
                            <Typography align="center" className={classes.cardTextDisplay} variant="h6" > Agent(s) Available</Typography>
                        </CardContent>
                    </Card>
                </Grid>
                <Grid item xs={12} lg={2} md={3} className={classes.gridSpacing} spacing={2}>
                    <Card className={classes.root}>
                        <CardContent>
                            <Typography align="center" className={classes.cardMetrics} variant="h2" component="h2">
                                {this.state.agentsOnCall}
                            </Typography>
                            <Box component="span" m={1} /> 
                            <Typography align="center" className={classes.cardTextDisplay} variant="h6" > Agent(s) On Call</Typography>
                        </CardContent>
                    </Card>
                </Grid>
                <Grid item xs={12} lg={2} md={3} className={classes.gridSpacing} spacing={2}>
                    <Card className={classes.root}>
                        <CardContent>
                            <Typography align="center" className={classes.cardMetrics} variant="h2" component="h2">
                                {this.state.agentsNonProductive}
                            </Typography>
                            <Box component="span" m={1} /> 
                            <Typography align="center" className={classes.cardTextDisplay} variant="h6" > Agent(s) Non Productive</Typography>
                        </CardContent>
                    </Card>
                </Grid>
               
                <Grid item xs={12} lg={2} md={3} className={classes.gridSpacing} spacing={2}>
                    <Card className={classes.root}>
                        <CardContent>
                            <Typography align="center" className={classes.cardMetrics} variant="h2" component="h2">
                                {this.state.AgentsError}
                            </Typography>
                            <Box component="span" m={1} /> 
                            <Typography align="center" className={classes.cardTextDisplay} variant="h6" > Agent(s) Error</Typography>
                        </CardContent>
                    </Card>
                </Grid>
            </Grid>